import argparse
import etcd3
import time
import sys
import logging

class EtcdLockManager:
    def __init__(self, host='127.0.0.1', port=2379):
        self.etcd_client = etcd3.client(host=host, port=port)
        self.logger = logging.getLogger(__name__)

    def acquire_lock(self, lock_name, namespace):
        try:
            lock_key = f"/locks/{lock_name}"
            lock = self.etcd_client.lock(lock_key, 31536000)
            lock.acquire()
        except Exception as e:
            self.logger.error(f"Failed to acquire the lock from namespace {namespace}: {e.args}")
            return False

        if lock.is_acquired():
            self.logger.info(f"Lock acquired successfully from namespace {namespace}.")
            return True
        else:
            return False

    def release_lock(self, lock_name, namespace):
        try:
            lock_key = f"/locks/{lock_name}"
            response = self.etcd_client.get_response(lock_key)

            if response.count > 0:
                self.etcd_client.delete(lock_key)
                self.logger.info(f"Lock released from namespace {namespace}.")
                return True
            else:
                return False
        except Exception as e:
            self.logger.error(f"Error occurred in releasing the lock from namespace {namespace}: {e.args}")
            return False

def main():
    logging.basicConfig(level=logging.INFO)
    parser = argparse.ArgumentParser(description="Acquire etcd lock")
    parser.add_argument("action", choices=["acquire_lock", "release_lock"], help="Specify 'acquire_lock' or 'release_lock'")
    parser.add_argument("lock_name", help="Name of the lock to acquire")
    parser.add_argument("namespace", help="Namespace e.g dev-a or dev-b")
    args = parser.parse_args()

    lock_manager = EtcdLockManager()

    if args.action == "acquire_lock":
        lock_acquired = lock_manager.acquire_lock(args.lock_name, args.namespace)
        if not lock_acquired:
            sys.exit(1)
    elif args.action == "release_lock":
        lock_released = lock_manager.release_lock(args.lock_name, args.namespace)
        if not lock_released:
            sys.exit(1)
    else:
        print("Invalid action...choose 'acquire_lock' or 'release_lock' for action type.")
        sys.exit(1)

if __name__ == "__main__":
    main()
